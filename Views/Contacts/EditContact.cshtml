 @model ContactManagement.Models.ContactModel

<h2>Edit Contact</h2>

<div>
    <form data-bind="submit: saveContact">
        <div class="form-group">
            <label for="Name">Name</label>
            <input type="text" class="form-control" id="Name" data-bind="value: name, valueUpdate: 'input'" required pattern="[a-zA-Z\s]+"
                   title="Only letters and spaces are allowed"
                   oninput="this.value = this.value.replace(/[^a-zA-Z\s]/g, '').trim()" />
        </div>
        <div class="form-group">
            <label for="Email">Email</label>
            <input type="email" class="form-control" id="Email" data-bind="value: email, valueUpdate: 'input'" required />
        </div>
        <div class="form-group">
            <label for="Phone">Phone</label>
            <input type="text" class="form-control" id="Phone" data-bind="value: phone, valueUpdate: 'input'" required maxlength="10" pattern="\d+"
                   title="Only numbers are allowed"
                   oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
        </div>
        <div class="form-group">
            <label for="Company">Company</label>
            <input type="text" class="form-control" id="Company" data-bind="value: company, valueUpdate: 'input'" required />
        </div>

        <div id="errorMessage" class="error-message" style="color: red; margin-top: 10px;" data-bind="text: errorMessage"></div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <a class="btn btn-secondary" onclick="window.location.href='/contacts/getallcontacts'">Go Back</a>
    </form>
</div>

<!-- Include dependencies -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/knockout@3.5.1/build/output/knockout-latest.js"></script>

<script>
    function EditContactViewModel(initialData) {
        var self = this;

        self.contactId = ko.observable(initialData.contactId);
        self.name = ko.observable(initialData.name);
        self.email = ko.observable(initialData.email);
        self.phone = ko.observable(initialData.phone);
        self.company = ko.observable(initialData.company);

        self.errorMessage = ko.observable('');

        self.saveContact = async function () {
            let contactData = {
                ContactId: self.contactId(),
                Name: self.name(),
                Email: self.email(),
                Phone: self.phone(),
                Company: self.company()
            };

            try {
                const response = await fetch('/Contacts/Edit/' + contactData.ContactId, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(contactData)
                });

                if (response.ok) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Contact updated successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/Contacts/GetAllContacts';
                    });
                } else if (response.status === 409) {
                    self.errorMessage("A contact with the same details already exists.");
                } else {
                    const errorData = await response.json();
                    self.errorMessage("Failed to update contact: " + (errorData.message || "Unknown error"));
                }
            } catch (error) {
                self.errorMessage("Error: " + error.message);
            }
        };
    }

    // Initialize the ViewModel with the server-side data
    var initialContactData = {
        contactId: @Model.ContactId,
        name: '@Model.Name',
        email: '@Model.Email',
        phone: '@Model.Phone',
        company: '@Model.Company'
    };

    ko.applyBindings(new EditContactViewModel(initialContactData));
</script>
