@* @{
    Layout = "_Layout";
}
<style>
    .custom-btn-spacing {
        margin: 0 10px; /* Adds horizontal spacing between buttons */
    }
</style>

<h2>My Contacts</h2>
<div class="d-flex justify-content-between align-items-center mb-3">
    <a href="@Url.Action("Logout", "Auth")" class="btn btn-danger">Logout</a>
    <a href="#" class="btn btn-primary" data-bind="click: addNewContact">Add New Contact</a>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Company</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: contacts">
        <tr>
            <td data-bind="text: name"></td>
            <td data-bind="text: email"></td>
            <td data-bind="text: phone"></td>
            <td data-bind="text: company"></td>
            <td>
                <!-- Updated Edit Button to route to the EditContact view -->
                <a data-bind="attr: { href: '/Contacts/Edit/' + contactId() }" class="btn btn-warning">Edit</a>
                <button class="btn btn-danger" data-bind="click: $parent.deleteContact">Delete</button>
            </td>
        </tr>
    </tbody>
</table>
<!-- SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/knockout@3.5.1/build/output/knockout-latest.js"></script>
<script>
    function Contact(data) {
        this.contactId = ko.observable(data.contactId);
        this.name = ko.observable(data.name);
        this.email = ko.observable(data.email);
        this.phone = ko.observable(data.phone);
        this.company = ko.observable(data.company);
    }

    function ContactViewModel() {
        var self = this;

        self.contacts = ko.observableArray([]);

        // Load contacts via AJAX (GET request)
        self.loadContacts = function () {
            $.ajax({
                url: '/Contacts/GetAllContacts',
                type: 'GET',
                headers: {
                },
                success: function (data) {
                    var mappedContacts = data.map(function (item) {
                        return new Contact(item);
                    });
                    self.contacts(mappedContacts);
                },
                error: function (xhr) {
                    if (xhr.status === 401) {
                        alert("Session expired. Please log in again.");
                        window.location.href = '/Auth/Login';
                    } else {
                        console.error("Error loading contacts:", xhr.statusText);
                    }
                }
            });
        };

        // Add new contact (redirecting)
        self.addNewContact = function () {
            window.location.href = '/Contacts/AddContact';  
        };



        self.deleteContact = function (contact) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ff5733',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-check-circle"></i> Yes, delete it!',
                cancelButtonText: '<i class="fas fa-times-circle"></i> No, cancel!',
                customClass: {
                    confirmButton: 'btn btn-danger btn-lg',
                    cancelButton: 'btn btn-secondary btn-lg',
                },
                buttonsStyling: false, // disables default styling
                didOpen: () => {
                    // Custom inline style to add margin between buttons
                    const buttons = Swal.getConfirmButton().parentElement.querySelectorAll('button');
                    buttons.forEach(button => {
                        button.style.margin = '0 10px'; // Add horizontal margin to each button
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Contacts/DeleteContact/' + contact.contactId(),
                        type: 'POST',
                        success: function () {
                            self.contacts.remove(contact);
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Contact deleted successfully.',
                                iconHtml: '<i class="fas fa-trash"></i>',
                                confirmButtonColor: '#ff5733',
                                confirmButtonText: '<i class="fas fa-thumbs-up"></i> OK',
                                customClass: {
                                    confirmButton: 'btn btn-success btn-lg'
                                },
                                buttonsStyling: false
                            });
                        },
                        error: function (xhr) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Error deleting contact: ' + xhr.responseText,
                                icon: 'error',
                                confirmButtonColor: '#d33',
                                confirmButtonText: '<i class="fas fa-exclamation-circle"></i> OK',
                                customClass: {
                                    confirmButton: 'btn btn-danger btn-lg'
                                },
                                buttonsStyling: false
                            });
                            console.error("Error:", xhr);
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire({
                        title: 'Cancelled',
                        text: 'Your contact is safe!',
                        icon: 'error',
                        confirmButtonColor: '#6c757d',
                        confirmButtonText: '<i class="fas fa-check-circle"></i> OK',
                        customClass: {
                            confirmButton: 'btn btn-secondary btn-lg'
                        },
                        buttonsStyling: false
                    });
                }
            });
        };


        // Load contacts on page load
        self.loadContacts();
    }

    ko.applyBindings(new ContactViewModel());
</script>
 *@









 




 

@{
    Layout = "_Layout";
}
<style>
    .swal2-btn-spacing .swal2-confirm,
    .swal2-btn-spacing .swal2-cancel {
        margin: 0 10px; /* Adds horizontal spacing between buttons */
    }
</style>

<h2>My Contacts</h2>

<!-- Search Input Field -->
<div class="mb-3">
    <input type="text" id="searchBox" class="form-control" placeholder="Search contacts..." data-bind="value: searchQuery, valueUpdate: 'input'">
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a href="#" class="btn btn-primary ms-auto" data-bind="click: addNewContact">Add New Contact</a>
</div>

<!-- No contacts available message -->
<div data-bind="visible: noContacts" class="alert alert-warning">
    No contacts available. Please add a contact.
</div>

<!-- No contacts found message (only shows when there are contacts but none match the search) -->
<div data-bind="visible: noResults" class="alert alert-warning">
    No contacts found matching your search.
</div>

<table class="table" data-bind="visible: contacts().length > 0">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Company</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: filteredContacts">
        <tr>
            <td data-bind="text: name"></td>
            <td data-bind="text: email"></td>
            <td data-bind="text: phone"></td>
            <td data-bind="text: company"></td>
            <td>
                <!-- Updated Edit Button to route to the EditContact view -->
                <a data-bind="attr: { href: '/Contacts/Edit/' + contactId() }" class="btn btn-warning">Edit</a>
                <button class="btn btn-danger" data-bind="click: $parent.deleteContact">Delete</button>
            </td>
        </tr>
    </tbody>
</table>


<!-- SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/knockout@3.5.1/build/output/knockout-latest.js"></script>


<script>
    function Contact(data) {
        this.contactId = ko.observable(data.contactId);
        this.name = ko.observable(data.name);
        this.email = ko.observable(data.email);
        this.phone = ko.observable(data.phone);
        this.company = ko.observable(data.company);
    }

    function ContactViewModel() {
        var self = this;

        self.contacts = ko.observableArray([]);
        self.searchQuery = ko.observable("");  
              self.noResults = ko.observable(false); // Flag for no search results
    self.noContacts = ko.observable(false); // Flag for no contacts in the list



        // Load contacts via AJAX (GET request)
        self.loadContacts = function () {
            $.ajax({
                url: '/Contacts/GetAllContacts',
                type: 'GET',
                success: function (data) {
                    var mappedContacts = data.map(function (item) {
                        return new Contact(item);
                    });
                    self.contacts(mappedContacts);
                    self.noContacts(self.contacts().length === 0); // Set flag if no contacts are loaded
          
                },
                error: function (xhr) {
                    if (xhr.status === 401) {
                        alert("Session expired. Please log in again.");
                        window.location.href = '/Auth/Login';
                    } else {
                        console.error("Error loading contacts:", xhr.statusText);
                    }
                }
            });
        };

        // Add new contact (redirecting)
        self.addNewContact = function () {
            window.location.href = '/Contacts/AddContact';
        };

        // Delete contact
        self.deleteContact = function (contact) {
           Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#ff5733',
    cancelButtonColor: '#6c757d',
    confirmButtonText: '<i class="fas fa-check-circle"></i> Yes, delete it!',
    cancelButtonText: '<i class="fas fa-times-circle"></i> No, cancel!',
    customClass: {
        container: 'swal2-btn-spacing', // Add spacing to buttons
        confirmButton: 'btn btn-danger btn-lg',
        cancelButton: 'btn btn-secondary btn-lg',
    },
    buttonsStyling: false
}).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Contacts/DeleteContact/' + contact.contactId(),
                        type: 'POST',
                        success: function () {
                            self.contacts.remove(contact);
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Contact deleted successfully.',
                                iconHtml: '<i class="fas fa-trash"></i>',
                                confirmButtonColor: '#ff5733',
                                confirmButtonText: '<i class="fas fa-thumbs-up"></i> OK',
                                customClass: {
                                    confirmButton: 'btn btn-success btn-lg'
                                },
                                buttonsStyling: false
                            });
                        },
                        error: function (xhr) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Error deleting contact: ' + xhr.responseText,
                                icon: 'error',
                                confirmButtonColor: '#d33',
                                confirmButtonText: '<i class="fas fa-exclamation-circle"></i> OK',
                                customClass: {
                                    confirmButton: 'btn btn-danger btn-lg'
                                },
                                buttonsStyling: false
                            });
                            console.error("Error:", xhr);
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire({
                        title: 'Cancelled',
                        text: 'Your contact is safe!',
                        icon: 'error',
                        confirmButtonColor: '#6c757d',
                        confirmButtonText: '<i class="fas fa-check-circle"></i> OK',
                        customClass: {
                            confirmButton: 'btn btn-secondary btn-lg'
                        },
                        buttonsStyling: false
                    });
                }
            });
        };

        // Filter contacts based on the search query
        // self.filteredContacts = ko.computed(function () {
        //     var query = self.searchQuery().toLowerCase();
        //     return self.contacts().filter(function (contact) {
        //         return contact.name().toLowerCase().includes(query) ||
        //             contact.email().toLowerCase().includes(query) ||
        //             contact.phone().toLowerCase().includes(query) ||
        //             contact.company().toLowerCase().includes(query);
        //     });
        // });

        // Filter contacts based on the search query
    self.filteredContacts = ko.computed(function () {
        var query = self.searchQuery().toLowerCase();
        var filtered = self.contacts().filter(function (contact) {
            return contact.name().toLowerCase().includes(query) ||
                contact.email().toLowerCase().includes(query) ||
                contact.phone().toLowerCase().includes(query) ||
                contact.company().toLowerCase().includes(query);
        });

        self.noResults(filtered.length === 0 && self.contacts().length > 0); // Only set noResults if there are contacts, but no matches
        return filtered;
    });
        // Load contacts on page load
        self.loadContacts();
    }

    ko.applyBindings(new ContactViewModel());
</script> 



  
